##此页讲述 java并发包java.util.concurrent 中的 AbstractQueuedSynchronizer 抽象类。
### 此类是 java并罚保的基础工具类，是实现 ReentrantLock、CountDownLatch、Semaphore、FutureTask 等类的基础。


问题：
1、仔细看shouldParkAfterFailedAcquire(p, node)，我们可以发现，其实第一次进来的时候，一般都不会返回true的 ？
原因很简单，前驱节点的waitStatus=-1是依赖于后继节点设置的。也就是说，我都还没给前驱设置-1呢，怎么可能是true呢，
但是要看到，这个方法是套在循环里的，所以第二次进来的时候状态就是-1了。



##--------------------------------------------------------------------------------------------------
https://javadoop.com/post/AbstractQueuedSynchronizer

这里有一个概念: 可重入锁、不可重入锁。


AbstractQueuedSynchronizer 的四个属性：
1、// 头结点，你直接把它当做 当前持有锁的线程 可能是最好理解的
  private transient volatile Node head;

2、// 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表
  private transient volatile Node tail;

3、// 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁
  // 这个值可以大于 1，是因为锁可以重入，每次重入都加上 1
  private volatile int state;

4、// 代表当前持有独占锁的线程，举个最重要的使用例子，因为锁可以重入
  // reentrantLock.lock()可以嵌套调用多次，所以每次用这个来判断当前线程是否已经拥有了锁
  // if (currentThread == getExclusiveOwnerThread()) {state++}
  private transient Thread exclusiveOwnerThread; //继承自AbstractOwnableSynchronizer



node 数据结构：

static final class Node {
    // 标识节点当前在共享模式下
    static final Node SHARED = new Node();
    // 标识节点当前在独占模式下
    static final Node EXCLUSIVE = null;

    // ======== 下面的几个int常量是给waitStatus用的 ===========
    /** waitStatus value to indicate thread has cancelled */
    // 代码此线程取消了争抢这个锁
    static final int CANCELLED =  1;
    /** waitStatus value to indicate successor's thread needs unparking */
    // 官方的描述是，其表示当前node的后继节点对应的线程需要被唤醒
    static final int SIGNAL    = -1;
    /** waitStatus value to indicate thread is waiting on condition */
    // 本文不分析condition，所以略过吧，下一篇文章会介绍这个
    static final int CONDITION = -2;
    /**
     * waitStatus value to indicate the next acquireShared should
     * unconditionally propagate
     */
    // 同样的不分析，略过吧
    static final int PROPAGATE = -3;
    // =====================================================

    // 取值为上面的1、-1、-2、-3，或者0(以后会讲到)
    // 这么理解，暂时只需要知道如果这个值 大于0 代表此线程取消了等待，
    //    ps: 半天抢不到锁，不抢了，ReentrantLock是可以指定timeouot的。。。
    /***/ waitStatus 代表的是后继节点的状态，新加入到阻塞队列中的节点的waitStatus=0，因为没有后继节点所以设置一下初始化的默认值0
    volatile int waitStatus;
    // 前驱节点的引用
    volatile Node prev;
    // 后继节点的引用
    volatile Node next;
    // 这个就是线程本尊
    volatile Thread thread;

}



ReentrantLock 在内部用了内部类 Sync 来管理锁：分为FairSync（公平锁）、NonfairSync（非公平锁）。





##--------------------------------------------------------------------------------------------------




